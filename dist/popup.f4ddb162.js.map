{"mappings":"ACQA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAe,SAAS,cAAc,CAAC,WACvC,EAAkB,SAAS,cAAc,CAAC,aAC1C,EAAkB,SAAS,cAAc,CAAC,aAC1C,EAAa,SAAS,cAAc,CAAC,QACrC,EAAgB,SAAS,cAAc,CAAC,YAGxC,EAAW,UAAU,QAAQ,EAAI,UAAU,YAAY,CACvD,EAAW,IAAI,KAAK,YAAY,CAAC,CAAC,KAAK,CAAE,CAAE,KAAM,UAAW,GAC/D,EAAE,CAAC,EAAS,KAAK,CAAC,IAAI,CAAC,EAAE,EAE5B,SAAS,EAAS,CAAM,CAAE,EAAU,EAAE,EAChC,AAAW,YAAX,GACF,EAAc,WAAW,CAAG,6BAC5B,EAAgB,QAAQ,CAAG,EAAgB,QAAQ,CAAG,EAAW,QAAQ,CAAG,CAAA,GACnE,AAAW,UAAX,GACT,EAAc,WAAW,CAAG,EAC5B,EAAgB,QAAQ,CAAG,EAAgB,QAAQ,CAAG,EAAW,QAAQ,CAAG,CAAA,GACxD,UAAX,IACT,EAAc,WAAW,CAAG,CAAC,OAAO,EAAE,EAAA,CAAS,CAC/C,EAAgB,QAAQ,CAAG,EAAgB,QAAQ,CAAG,EAAW,QAAQ,CAAG,CAAA,EAEhF,CAEA,eAAe,EAAgB,CAAiB,CAAE,EAAO,IAAI,EAC3D,IAAM,EAAW,GAAQ,EAAa,KAAK,CAAC,IAAI,GAEhD,GAAI,CAAC,EAAU,YACb,EAAS,QAAS,uBAIpB,IAAM,EAAc,CAAA,EAAG;AAAkB;AAAA;AAAgB,EAAE,EAAA,CAAU,CACrE,EAAS,WAET,GAAI,CACF,IAAM,EAAW,MAAM,MA9BR,wCA8B0B,CACvC,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,SAAS,CAAC,CAAE,OAAQ,CAAY,EAC7C,GAEA,GAAI,CAAC,EAAS,EAAE,CAAE,CAChB,IAAM,EAAY,MAAM,EAAS,IAAI,EACrC,OAAM,AAAI,MAAM,EAAU,KAAK,EAAI,CAAC,6BAA6B,EAAE,EAAS,MAAM,CAAA,CAAE,CACtF,CAGA,IAAM,EAAa,AADN,CAAA,MAAM,EAAS,IAAI,EAAhC,EACwB,aAAa,EAAI,6BACzC,EAAS,QAAS,EACpB,CAAE,MAAO,EAAK,CACZ,QAAQ,KAAK,CAAC,GACd,EAAS,QAAS,EAAI,OAAO,CAC/B,CACF,CAGC,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAmB,AAAC,IACxC,EAAK,eAAe,GACtB,EAAa,KAAK,CAAG,EAAK,eAAe,CAGzC,EADoB,4GACS,EAAK,eAAe,EAEjD,OAAO,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,mBAEhC,GAGA,EAAgB,gBAAgB,CAAC,QAAS,KAKxC,EAJoB,CAAC;A;A;AAGsB,+CAAA,CAAC,CAE9C,GAEA,EAAgB,gBAAgB,CAAC,QAAS,KAExC,EADoB,CAAC,qDAAqD,EAAE,EAAS,EAAE,CAAC,CAE1F,GAEA,EAAW,gBAAgB,CAAC,QAAS,KASnC,EARoB;A;A;A;AAIa,qCAAA,EAAE,EAAS;A;A;AAG5C,IAAA,CAAC,CAEH,EACF","sources":["<anon>","popup.js"],"sourcesContent":["var $b453c56ec4aeb0a8$exports = {};\n/**\n * Summarize+ Chrome Extension\n * Author: Jamila Nchare \n * Date: October 2025\n * Description: Summarizes and translates highlighted text using Chrome's built-in AI (Gemini Nano).\n */ document.addEventListener('DOMContentLoaded', ()=>{\n    const inputElement = document.getElementById(\"myInput\");\n    const summarizeButton = document.getElementById(\"Summarize\");\n    const translateButton = document.getElementById(\"Translate\");\n    const bothButton = document.getElementById(\"Both\");\n    const outputElement = document.getElementById(\"myOutput\");\n    const SERVER_URL = 'http://localhost:3000/generateContent';\n    const userLang = navigator.language || navigator.userLanguage;\n    const langName = new Intl.DisplayNames([\n        'en'\n    ], {\n        type: 'language'\n    }).of(userLang.split('-')[0]);\n    function updateUI(status, message = \"\") {\n        if (status === 'loading') {\n            outputElement.textContent = \"Processing... Please wait.\";\n            summarizeButton.disabled = translateButton.disabled = bothButton.disabled = true;\n        } else if (status === 'ready') {\n            outputElement.textContent = message;\n            summarizeButton.disabled = translateButton.disabled = bothButton.disabled = false;\n        } else if (status === 'error') {\n            outputElement.textContent = `Error: ${message}`;\n            summarizeButton.disabled = translateButton.disabled = bothButton.disabled = false;\n        }\n    }\n    async function fetchAIResponse(systemInstruction, text = null) {\n        const userText = text || inputElement.value.trim();\n        if (!userText) {\n            updateUI('error', \"No text to process.\");\n            return;\n        }\n        const finalPrompt = `${systemInstruction}\\n\\nUSER TEXT:\\n${userText}`;\n        updateUI('loading');\n        try {\n            const response = await fetch(SERVER_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    prompt: finalPrompt\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || `Server responded with status ${response.status}`);\n            }\n            const data = await response.json();\n            const resultText = data.generatedText || \"No response from AI model.\";\n            updateUI('ready', resultText);\n        } catch (err) {\n            console.error(err);\n            updateUI('error', err.message);\n        }\n    }\n    // Load any selected text from background\n    chrome.storage.local.get(\"textToSummarize\", (data)=>{\n        if (data.textToSummarize) {\n            inputElement.value = data.textToSummarize;\n            const instruction = \"You are a summarization expert. Summarize the text concisely, keeping the language the same as the input.\";\n            fetchAIResponse(instruction, data.textToSummarize);\n            chrome.storage.local.remove(\"textToSummarize\");\n        }\n    });\n    // Buttons\n    summarizeButton.addEventListener(\"click\", ()=>{\n        const instruction = `You are a summarization expert.\n     Summarize the text concisely. Return the summary in \n     the same language as the input text.\n     Do not translate it into another language.`;\n        fetchAIResponse(instruction);\n    });\n    translateButton.addEventListener(\"click\", ()=>{\n        const instruction = `Translate the text into the user's default language (${langName}).`;\n        fetchAIResponse(instruction);\n    });\n    bothButton.addEventListener(\"click\", ()=>{\n        const instruction = `\n      You are an expert summarizer and translator.\n      Instructions:\n      1. Summarize the text.\n      2. Translate that summary into ${langName}.\n      3. Output ONLY the translated summary as plain text.\n      4. Do NOT include any labels or explanations.\n    `;\n        fetchAIResponse(instruction);\n    });\n});\n\n\n//# sourceMappingURL=popup.f4ddb162.js.map\n","/**\n * Summarize+ Chrome Extension\n * Author: Jamila Nchare \n * Date: October 2025\n * Description: Summarizes and translates highlighted text using Chrome's built-in AI (Gemini Nano).\n */\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const inputElement = document.getElementById(\"myInput\"); \n  const summarizeButton = document.getElementById(\"Summarize\");\n  const translateButton = document.getElementById(\"Translate\");\n  const bothButton = document.getElementById(\"Both\");\n  const outputElement = document.getElementById(\"myOutput\"); \n\n  const SERVER_URL = 'http://localhost:3000/generateContent';\n  const userLang = navigator.language || navigator.userLanguage;\n  const langName = new Intl.DisplayNames(['en'], { type: 'language' })\n    .of(userLang.split('-')[0]);\n\n  function updateUI(status, message = \"\") {\n    if (status === 'loading') {\n      outputElement.textContent = \"Processing... Please wait.\";\n      summarizeButton.disabled = translateButton.disabled = bothButton.disabled = true;\n    } else if (status === 'ready') {\n      outputElement.textContent = message;\n      summarizeButton.disabled = translateButton.disabled = bothButton.disabled = false;\n    } else if (status === 'error') {\n      outputElement.textContent = `Error: ${message}`;\n      summarizeButton.disabled = translateButton.disabled = bothButton.disabled = false;\n    }\n  }\n\n  async function fetchAIResponse(systemInstruction, text = null) {\n    const userText = text || inputElement.value.trim();\n\n    if (!userText) {\n      updateUI('error', \"No text to process.\");\n      return;\n    }\n\n    const finalPrompt = `${systemInstruction}\\n\\nUSER TEXT:\\n${userText}`;\n    updateUI('loading');\n\n    try {\n      const response = await fetch(SERVER_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: finalPrompt }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Server responded with status ${response.status}`);\n      }\n\n      const data = await response.json();\n      const resultText = data.generatedText || \"No response from AI model.\";\n      updateUI('ready', resultText);\n    } catch (err) {\n      console.error(err);\n      updateUI('error', err.message);\n    }\n  }\n\n  // Load any selected text from background\n   chrome.storage.local.get(\"textToSummarize\", (data) => {\n    if (data.textToSummarize) {\n      inputElement.value = data.textToSummarize;\n\n      const instruction = \"You are a summarization expert. Summarize the text concisely, keeping the language the same as the input.\";\n      fetchAIResponse(instruction, data.textToSummarize);\n\n      chrome.storage.local.remove(\"textToSummarize\");\n    }\n  });\n\n  // Buttons\n  summarizeButton.addEventListener(\"click\", () => {\n    const instruction = `You are a summarization expert.\n     Summarize the text concisely. Return the summary in \n     the same language as the input text.\n     Do not translate it into another language.`;\n    fetchAIResponse(instruction);\n  });\n\n  translateButton.addEventListener(\"click\", () => {\n    const instruction = `Translate the text into the user's default language (${langName}).`;\n    fetchAIResponse(instruction);\n  });\n\n  bothButton.addEventListener(\"click\", () => {\n    const instruction = `\n      You are an expert summarizer and translator.\n      Instructions:\n      1. Summarize the text.\n      2. Translate that summary into ${langName}.\n      3. Output ONLY the translated summary as plain text.\n      4. Do NOT include any labels or explanations.\n    `;\n    fetchAIResponse(instruction);\n  });\n});\n"],"names":["document","addEventListener","inputElement","getElementById","summarizeButton","translateButton","bothButton","outputElement","userLang","navigator","language","userLanguage","langName","Intl","DisplayNames","type","of","split","updateUI","status","message","textContent","disabled","fetchAIResponse","systemInstruction","text","userText","value","trim","finalPrompt","response","fetch","method","headers","body","JSON","stringify","prompt","ok","errorData","json","Error","error","resultText","data","generatedText","err","console","chrome","storage","local","get","textToSummarize","remove"],"version":3,"file":"popup.f4ddb162.js.map"}